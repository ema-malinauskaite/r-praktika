#
# #5
# #Atskiriamas test temperaturos stulpelis nuo kontaktu plotu stulpeliu
# test_loo_teor_temp <- test_loo[,1]
# test_loo_kontaktai <- test_loo[,-1]
#
# #Apskaiciuojamos temperaturos (test_kontaktaiXkoef)
# apsk_temp_loo_eil <- as.matrix(test_loo_kontaktai) %*% koef_loo
#
# #Sudaroma teoriniu ir apskaiciuotu temperaturu lentele
# apsk_temp_loo_cv <- rbind(apsk_temp_loo_cv, data.frame(apsk_temp_loo_eil))
# }
#
# apsk_ir_teor_temp_loo_cv <- data.frame(cbind(pdb_tm_wt_mut_visi_stulpeliai, apsk_temp_loo_cv)) %>%
#   rename("apsk_temp_loo" = "apsk_temp_loo_eil")
#
# saveRDS(apsk_ir_teor_temp_loo_cv, file =
#   paste0("rds-failai/apsk_ir_teor_temp_loo_cv-",atom_types,".rds"))
#
# r2_cv_loo <- apsk_ir_teor_temp_loo_cv %>%
#   mutate(r2 = (deltaTm - apsk_temp_loo)^2) %>%
#   summarise(r2 = round(sum(r2), 2))
# Visi grafikai:
be_cv_grafikas <- ggplot(apsk_ir_teor_temp_is_visu) +
aes(x = deltaTm, y = apsk_temp_is_visu, color = WT) +
labs(x = "Teorinis temperaturu skirtumas",
y = "Apskaiciuotas temperaturu skirtumas",
title = paste0("Be CV (", atom_types, ")"),
subtitle = paste0("r2 = ",r2_is_visu)
) +
geom_point(size = 1L) +
theme_light()
# cv_loo_grafikas <- ggplot(apsk_ir_teor_temp_loo_cv) +
#  aes(x = deltaTm, y = apsk_temp_loo, color = pH_grupe) +
#     labs(x = "Teorinis temperaturu skirtumas",
#          y = "Apskaiciuotas temperaturu skirtumas",
#          title = paste0("LOOCV (", atom_types, ")"),
#          subtitle = paste0("r2 = ", r2_cv_loo)
#          ) +
#  geom_point(size = 1L) +
#  theme_light()
#
# cv_loo_grafikas_filtered <- ggplot(apsk_ir_teor_temp_loo_cv %>% filter(apsk_temp_loo > (-100) & apsk_temp_loo < 100)) +
#  aes(x = deltaTm, y = apsk_temp_loo, color = pH_grupe) +
#     labs(x = "Teorinis temperaturu skirtumas",
#          y = "Apskaiciuotas temperaturu skirtumas",
#          title = paste0("LOOCV (", atom_types, ")"),
#          subtitle = paste0("r2 = ", r2_cv_loo)) +
#  geom_point(size = 1L) +
#  theme_light()
ggsave(be_cv_grafikas, device = "jpeg",filename = paste0(atom_types, "_be_cv.jpeg") ,path = "/Users/user/Desktop")
# ggsave(cv_loo_grafikas, device = "jpeg",filename = paste0(atom_types, "_loo_cv.jpeg") ,path = "/Users/user/Desktop/praktika/r-praktika/grafikai")
#
# ggsave(cv_loo_grafikas_filtered, device = "jpeg",filename = paste0(atom_types, "_loo_cv_filtered.jpeg") ,path = "/Users/user/Desktop/praktika/r-praktika/grafikai")
}
)
}
apsk_ir_teor_temp_is_visu
be_cv_grafikas <- ggplot(apsk_ir_teor_temp_is_visu) +
aes(x = deltaTm, y = apsk_temp_is_visu, color = WT) +
labs(x = "Teorinis temperaturu skirtumas",
y = "Apskaiciuotas temperaturu skirtumas",
title = paste0("Be CV (", atom_types, ")"),
subtitle = paste0("r2 = ",r2_is_visu)
) +
geom_point(size = 1L) +
theme_light()
be_cv_grafikas
ggsave(be_cv_grafikas, device = "jpeg",filename = paste0(atom_types, "_be_cv.jpeg") ,path = "/Users/user/Desktop")
ggsave(be_cv_grafikas, device = "jpeg",filename = paste0(atom_types, "_be_cv.jpeg") ,path = "/Users/user/Desktop")
# Atomu tipu nuskaitymas cikle
for(e in c("RJ", #"JGMLL", "CHARMM19", "ZVCD", "TVG", "VS", "OPLS", "GROMOS53", "MPWACW", "FTA", "ENCAD", "CHARMM22", "AMBER", "RES_MCSC", "RESIDUE", "ROSETTA", "EM", "R", "GTL", "CSNO", "DK", "MF", "SZXLS"
)) {
atom_types_parsiuntimui <- e
grupavimo_failas <- data.table::fread(paste0("/Users/user/Desktop/praktika/r-praktika/atom_types/",atom_types_parsiuntimui, ".atoms"),
dec = ".", header = FALSE, skip = 1, encoding = "UTF-8", fill = TRUE,
data.table = FALSE
)
atom_types <- paste0(e, "_graf_filtr_") # Pavadinimo dalis, kuri nusako koks atomu grupavimo tipas, bei kita info
print(atom_types)
try({
#----
# Reiklaingu matricu sukurimas
matricu_lenteles <- fun_matricu_paruosimas_atom(pdb_termo_lent = pdb_tm_wt_mut, grupavimo_failas = grupavimo_failas)
A <- matricu_lenteles$visu_baltymu_kont_sumu_skirtumai_atom
b <- c(matricu_lenteles$termo_skirtumai_atom)
#Patikrinimas, kiek yra eiluciu, kuriose tik 1-2 baltymai su tuo kontakto tipu
kontaktu_sumos_wt_ir_wtx <- data.table(A)
kontaktu_sumos_wt_ir_wtx_susumuotos <- kontaktu_sumos_wt_ir_wtx %>%
summarise_all(n_distinct)
isfiltruoti_kontaktus <- kontaktu_sumos_wt_ir_wtx_susumuotos[which(kontaktu_sumos_wt_ir_wtx_susumuotos < 3)] %>%
transpose(keep.names = "pavadinimai") %>%
rename("wt_ir_wtx" = "V1")
print(isfiltruoti_kontaktus)
#patikrinus kokie kontaktai yra reti, kai kurie isfiltruojami
A <- A %>% data.table() %>%
select(-as.vector(isfiltruoti_kontaktus$pavadinimai)) %>% as.matrix()
duomenys_cv <- data.table(b, A)
#----------
# TLS be CV
tls_sprendimas_visi_baltymai <-
pracma::qrSolve(A, b)
apsk_temp_is_visu <-
A %*% tls_sprendimas_visi_baltymai
apsk_ir_teor_temp_is_visu <- cbind(pdb_tm_wt_mut_visi_stulpeliai, data.frame(apsk_temp_is_visu))
apsk_ir_teor_temp_is_visu
# saveRDS(apsk_ir_teor_temp_is_visu, file =
#   paste0("rds-failai/apsk_ir_teor_temp_is_visu-",atom_types,".rds"))
#------
r2_is_visu <- apsk_ir_teor_temp_is_visu %>%
mutate(r2 = (deltaTm - apsk_temp_is_visu)^2) %>%
summarise(r2 = round(sum(r2), 2))
# #LOOCV
# #------
# eil_skaicius <- nrow(duomenys_cv)
# apsk_temp_loo_cv <- data.frame()
#
# for (i in 1:eil_skaicius) {
# print(i)
# #Duomenys suskirstomi i train ir test
# train_loo <- duomenys_cv[-i,]
# test_loo <- duomenys_cv[i,]
#
# #Atskiriamas train temperaturos stulpelis nuo kontaktu plotu stulpeliu
# train_loo_teor_temp <- train_loo[,1]
# train_loo_kontaktai <- train_loo[,-1]
#
# #Apskaiciuojami koeficientai
# koef_loo <- pracma::qrSolve(as.matrix(train_loo_kontaktai), as.matrix(train_loo_teor_temp))
#
# #5
# #Atskiriamas test temperaturos stulpelis nuo kontaktu plotu stulpeliu
# test_loo_teor_temp <- test_loo[,1]
# test_loo_kontaktai <- test_loo[,-1]
#
# #Apskaiciuojamos temperaturos (test_kontaktaiXkoef)
# apsk_temp_loo_eil <- as.matrix(test_loo_kontaktai) %*% koef_loo
#
# #Sudaroma teoriniu ir apskaiciuotu temperaturu lentele
# apsk_temp_loo_cv <- rbind(apsk_temp_loo_cv, data.frame(apsk_temp_loo_eil))
# }
#
# apsk_ir_teor_temp_loo_cv <- data.frame(cbind(pdb_tm_wt_mut_visi_stulpeliai, apsk_temp_loo_cv)) %>%
#   rename("apsk_temp_loo" = "apsk_temp_loo_eil")
#
# saveRDS(apsk_ir_teor_temp_loo_cv, file =
#   paste0("rds-failai/apsk_ir_teor_temp_loo_cv-",atom_types,".rds"))
#
# r2_cv_loo <- apsk_ir_teor_temp_loo_cv %>%
#   mutate(r2 = (deltaTm - apsk_temp_loo)^2) %>%
#   summarise(r2 = round(sum(r2), 2))
# Visi grafikai:
be_cv_grafikas <- ggplot(apsk_ir_teor_temp_is_visu) +
aes(x = deltaTm, y = apsk_temp_is_visu, color = WT) +
labs(x = "Teorinis temperaturu skirtumas",
y = "Apskaiciuotas temperaturu skirtumas",
title = paste0("Be CV (", atom_types, ")"),
subtitle = paste0("r2 = ",r2_is_visu)
) +
geom_point(size = 1L) +
theme_light()
# cv_loo_grafikas <- ggplot(apsk_ir_teor_temp_loo_cv) +
#  aes(x = deltaTm, y = apsk_temp_loo, color = pH_grupe) +
#     labs(x = "Teorinis temperaturu skirtumas",
#          y = "Apskaiciuotas temperaturu skirtumas",
#          title = paste0("LOOCV (", atom_types, ")"),
#          subtitle = paste0("r2 = ", r2_cv_loo)
#          ) +
#  geom_point(size = 1L) +
#  theme_light()
#
# cv_loo_grafikas_filtered <- ggplot(apsk_ir_teor_temp_loo_cv %>% filter(apsk_temp_loo > (-100) & apsk_temp_loo < 100)) +
#  aes(x = deltaTm, y = apsk_temp_loo, color = pH_grupe) +
#     labs(x = "Teorinis temperaturu skirtumas",
#          y = "Apskaiciuotas temperaturu skirtumas",
#          title = paste0("LOOCV (", atom_types, ")"),
#          subtitle = paste0("r2 = ", r2_cv_loo)) +
#  geom_point(size = 1L) +
#  theme_light()
ggsave(be_cv_grafikas, device = "jpeg",filename = paste0(atom_types, "_be_cv.jpeg") ,path = "/Users/user/Desktop")
# ggsave(cv_loo_grafikas, device = "jpeg",filename = paste0(atom_types, "_loo_cv.jpeg") ,path = "/Users/user/Desktop/praktika/r-praktika/grafikai")
#
# ggsave(cv_loo_grafikas_filtered, device = "jpeg",filename = paste0(atom_types, "_loo_cv_filtered.jpeg") ,path = "/Users/user/Desktop/praktika/r-praktika/grafikai")
}
)
}
# Atomu tipu nuskaitymas cikle
for(e in c("RJ"# ,"JGMLL", "CHARMM19", "ZVCD", "TVG", "VS", "OPLS", "GROMOS53", "MPWACW", "FTA", "ENCAD", "CHARMM22", "AMBER", "RES_MCSC", "RESIDUE", "ROSETTA", "EM", "R", "GTL", "CSNO", "DK", "MF", "SZXLS"
)) {
atom_types_parsiuntimui <- e
grupavimo_failas <- data.table::fread(paste0("/Users/user/Desktop/praktika/r-praktika/atom_types/",atom_types_parsiuntimui, ".atoms"),
dec = ".", header = FALSE, skip = 1, encoding = "UTF-8", fill = TRUE,
data.table = FALSE
)
atom_types <- paste0(e, "_graf_filtr_") # Pavadinimo dalis, kuri nusako koks atomu grupavimo tipas, bei kita info
print(atom_types)
try({
#----
# Reiklaingu matricu sukurimas
matricu_lenteles <- fun_matricu_paruosimas_atom(pdb_termo_lent = pdb_tm_wt_mut, grupavimo_failas = grupavimo_failas)
A <- matricu_lenteles$visu_baltymu_kont_sumu_skirtumai_atom
b <- c(matricu_lenteles$termo_skirtumai_atom)
#Patikrinimas, kiek yra eiluciu, kuriose tik 1-2 baltymai su tuo kontakto tipu
kontaktu_sumos_wt_ir_wtx <- data.table(A)
kontaktu_sumos_wt_ir_wtx_susumuotos <- kontaktu_sumos_wt_ir_wtx %>%
summarise_all(n_distinct)
isfiltruoti_kontaktus <- kontaktu_sumos_wt_ir_wtx_susumuotos[which(kontaktu_sumos_wt_ir_wtx_susumuotos < 3)] %>%
transpose(keep.names = "pavadinimai") %>%
rename("wt_ir_wtx" = "V1")
print(isfiltruoti_kontaktus)
#patikrinus kokie kontaktai yra reti, kai kurie isfiltruojami
A <- A %>% data.table() %>%
select(-as.vector(isfiltruoti_kontaktus$pavadinimai)) %>% as.matrix()
duomenys_cv <- data.table(b, A)
#----------
# TLS be CV
tls_sprendimas_visi_baltymai <-
pracma::qrSolve(A, b)
apsk_temp_is_visu <-
A %*% tls_sprendimas_visi_baltymai
apsk_ir_teor_temp_is_visu <- cbind(pdb_tm_wt_mut_visi_stulpeliai, data.frame(apsk_temp_is_visu))
apsk_ir_teor_temp_is_visu
# saveRDS(apsk_ir_teor_temp_is_visu, file =
#   paste0("rds-failai/apsk_ir_teor_temp_is_visu-",atom_types,".rds"))
#------
r2_is_visu <- apsk_ir_teor_temp_is_visu %>%
mutate(r2 = (deltaTm - apsk_temp_is_visu)^2) %>%
summarise(r2 = round(sum(r2), 2))
# #LOOCV
# #------
# eil_skaicius <- nrow(duomenys_cv)
# apsk_temp_loo_cv <- data.frame()
#
# for (i in 1:eil_skaicius) {
# print(i)
# #Duomenys suskirstomi i train ir test
# train_loo <- duomenys_cv[-i,]
# test_loo <- duomenys_cv[i,]
#
# #Atskiriamas train temperaturos stulpelis nuo kontaktu plotu stulpeliu
# train_loo_teor_temp <- train_loo[,1]
# train_loo_kontaktai <- train_loo[,-1]
#
# #Apskaiciuojami koeficientai
# koef_loo <- pracma::qrSolve(as.matrix(train_loo_kontaktai), as.matrix(train_loo_teor_temp))
#
# #5
# #Atskiriamas test temperaturos stulpelis nuo kontaktu plotu stulpeliu
# test_loo_teor_temp <- test_loo[,1]
# test_loo_kontaktai <- test_loo[,-1]
#
# #Apskaiciuojamos temperaturos (test_kontaktaiXkoef)
# apsk_temp_loo_eil <- as.matrix(test_loo_kontaktai) %*% koef_loo
#
# #Sudaroma teoriniu ir apskaiciuotu temperaturu lentele
# apsk_temp_loo_cv <- rbind(apsk_temp_loo_cv, data.frame(apsk_temp_loo_eil))
# }
#
# apsk_ir_teor_temp_loo_cv <- data.frame(cbind(pdb_tm_wt_mut_visi_stulpeliai, apsk_temp_loo_cv)) %>%
#   rename("apsk_temp_loo" = "apsk_temp_loo_eil")
#
# saveRDS(apsk_ir_teor_temp_loo_cv, file =
#   paste0("rds-failai/apsk_ir_teor_temp_loo_cv-",atom_types,".rds"))
#
# r2_cv_loo <- apsk_ir_teor_temp_loo_cv %>%
#   mutate(r2 = (deltaTm - apsk_temp_loo)^2) %>%
#   summarise(r2 = round(sum(r2), 2))
# Visi grafikai:
be_cv_grafikas <- ggplot(apsk_ir_teor_temp_is_visu) +
aes(x = deltaTm, y = apsk_temp_is_visu, color = WT) +
labs(x = "Teorinis temperaturu skirtumas",
y = "Apskaiciuotas temperaturu skirtumas",
title = paste0("Be CV (", atom_types, ")"),
subtitle = paste0("r2 = ",r2_is_visu)
) +
geom_point(size = 1L) +
theme_light()
# cv_loo_grafikas <- ggplot(apsk_ir_teor_temp_loo_cv) +
#  aes(x = deltaTm, y = apsk_temp_loo, color = pH_grupe) +
#     labs(x = "Teorinis temperaturu skirtumas",
#          y = "Apskaiciuotas temperaturu skirtumas",
#          title = paste0("LOOCV (", atom_types, ")"),
#          subtitle = paste0("r2 = ", r2_cv_loo)
#          ) +
#  geom_point(size = 1L) +
#  theme_light()
#
# cv_loo_grafikas_filtered <- ggplot(apsk_ir_teor_temp_loo_cv %>% filter(apsk_temp_loo > (-100) & apsk_temp_loo < 100)) +
#  aes(x = deltaTm, y = apsk_temp_loo, color = pH_grupe) +
#     labs(x = "Teorinis temperaturu skirtumas",
#          y = "Apskaiciuotas temperaturu skirtumas",
#          title = paste0("LOOCV (", atom_types, ")"),
#          subtitle = paste0("r2 = ", r2_cv_loo)) +
#  geom_point(size = 1L) +
#  theme_light()
ggsave(be_cv_grafikas, device = "jpeg",filename = paste0(atom_types, "_be_cv.jpeg") ,path = "/Users/user/Desktop")
# ggsave(cv_loo_grafikas, device = "jpeg",filename = paste0(atom_types, "_loo_cv.jpeg") ,path = "/Users/user/Desktop/praktika/r-praktika/grafikai")
#
# ggsave(cv_loo_grafikas_filtered, device = "jpeg",filename = paste0(atom_types, "_loo_cv_filtered.jpeg") ,path = "/Users/user/Desktop/praktika/r-praktika/grafikai")
}
)
}
be_cv_grafikas
# cv_loo_grafikas
# cv_loo_grafikas_filtered
fun_matricu_paruosimas_atom <- function(pdb_termo_lent, grupavimo_failas) {
visu_baltymu_kont_sumu_skirtumai <- data.frame()
termo_skirtumai <- data.frame() #desine tiesiniu lygciu sistemos puse matricose
#----
#Grupavimo lenteles sukurimas (reiklainga kitai funkcijai)
grupavimo_lentele <- grupavimo_failas %>%
mutate_all(na_if,"") %>%
tibble::column_to_rownames(var = "V1") %>%
rbind(solvent = c("solventsolvent"))
#-------
# Nulines lenteles kurimas (reikalinga kitai funkcijai)
grupes_pavadinimai <- rownames(grupavimo_lentele)
nuline_lentele_atomu_grupiu_pavadinimai<- data.frame(1:(nrow(grupavimo_lentele)^2))
nuline_lentele_atomu_grupiu_pavadinimai$pirma <- data.frame(rep(grupes_pavadinimai, each = nrow(grupavimo_lentele)))
nuline_lentele_atomu_grupiu_pavadinimai$antra <- rep(grupes_pavadinimai, times = nrow(grupavimo_lentele))
matrica_pavadinimams_nuline <- as.matrix(data.frame(grupe1 = nuline_lentele_atomu_grupiu_pavadinimai$pirma, grupe2 = nuline_lentele_atomu_grupiu_pavadinimai$antra))
nuline_lentele_atomu <- matrica_pavadinimams_nuline %>%
split(., row(.)) %>% sapply(
. %>% sort %>% paste(collapse = "-")
) %>% data.frame() %>%
rename("kontakto_tipas" = ".")
nuline_lentele_atomu$nuliai <- rep(0, times = nrow(nuline_lentele_atomu))
nuline_lentele_atomu <- nuline_lentele_atomu %>%
group_by(kontakto_tipas) %>%
summarise(nuliai = sum(nuliai)) %>%
transpose(make.names = "kontakto_tipas") %>%
select(-"solvent-solvent")
#-------
#wtx ir wt standartiniu lenteliu sukurimas
lizocimo_kontaktai_wt <- data.table::fread("./lizocimai/2LZM.contacts.interatom.table", na.strings = ".")
lizocimo_kontaktai_wt <- lizocimo_kontaktai_wt %>%
mutate(V13 = recode_factor(V13, .missing = "solvent")) %>%
mutate(V14 = recode_factor(V14, .missing = "solvent"))
wt_atom <- fun_atomu_grupiu_sumoms(lizocimo_kontaktai_wt, grupavimo_lentele, nuline_lentele_atomu)
lizocimo_kontaktai_wtx <- data.table::fread("./lizocimai/1L63.contacts.interatom.table", na.strings = ".")
lizocimo_kontaktai_wtx <- lizocimo_kontaktai_wtx %>%
mutate(V13 = recode_factor(V13, .missing = "solvent")) %>%
mutate(V14 = recode_factor(V14, .missing = "solvent"))
wtx_atom <- fun_atomu_grupiu_sumoms(lizocimo_kontaktai_wtx,  grupavimo_lentele, nuline_lentele_atomu)
skaicius <- 0
#----
for (i in pdb_termo_lent$pdb) {
lizocimo_kontaktai <- data.table::fread(paste("./lizocimai/",i,".contacts.interatom.table", sep = ""), na.strings = ".")
skaicius <- skaicius +1
print(skaicius)
lizocimo_kontaktai <- lizocimo_kontaktai %>%
mutate(V13 = recode_factor(V13, .missing = "solvent")) %>%
mutate(V14 = recode_factor(V14, .missing = "solvent"))
kontaktu_sumos_atom <- fun_atomu_grupiu_sumoms(lizocimo_kontaktai,  grupavimo_lentele, nuline_lentele_atomu)
viena_eilute <- pdb_termo_lent %>%
filter(pdb == i)
if (viena_eilute$WT == "wt") {
wt_ir_lizocimas_atom <- rbind(wt_atom, kontaktu_sumos_atom) %>%
transpose(keep.names = "kontakto_tipas") %>%
mutate(kont_sumu_skirtumas = V2 - V1) %>%
select(kontakto_tipas, kont_sumu_skirtumas) %>%
transpose(make.names = "kontakto_tipas")
} else {
wt_ir_lizocimas_atom <- rbind(wtx_atom, kontaktu_sumos_atom) %>%
transpose(keep.names = "kontakto_tipas") %>%
mutate(kont_sumu_skirtumas = V2 - V1) %>%
select(kontakto_tipas, kont_sumu_skirtumas) %>%
transpose(make.names = "kontakto_tipas")
}
visu_baltymu_kont_sumu_skirtumai <- rbind(visu_baltymu_kont_sumu_skirtumai, wt_ir_lizocimas_atom)
lizocimo_kontaktai = NULL
wt_ir_lizocimas_atom = NULL
}
termo_skirtumai <- pdb_termo_lent %>%
select(-WT, -pdb)
return(list(visu_baltymu_kont_sumu_skirtumai_atom = as.matrix(visu_baltymu_kont_sumu_skirtumai),termo_skirtumai_atom = as.matrix(termo_skirtumai)))
}
be_cv_grafikas <- ggplot(apsk_ir_teor_temp_is_visu) +
aes(x = deltaTm, y = apsk_temp_is_visu, color = WT) +
labs(x = "Teorinis temperaturu skirtumas",
y = "Apskaiciuotas temperaturu skirtumas",
title = paste0("Be CV (", atom_types, ")"),
subtitle = paste0("r2 = ",r2_is_visu)
) +
geom_point(size = 1L) +
theme_light()
be_cv_grafikas
ggsave(be_cv_grafikas, device = "jpeg",filename = paste0(atom_types, "_be_cv.jpeg") ,path = "/Users/user/Desktop")
knitr::opts_chunk$set(echo = TRUE)
ggplot(lizocimai_stat_WT_G) +
aes(x = WT, y = ddeltaG) +
geom_boxplot(fill = "#0c4c8a") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library("tidyverse")
#library("data.table")
lizocimai_pagr <- readxl::read_excel("./data/pro_344_sm_suppinfo.xlsx", sheet = "pilnas") %>%
as.data.frame(stringsAsFactors = FALSE)
# lizocimai_pagr <-  lizocimai_pagr_su_mutacijom %>% filter(mut_skaicius<1000)
# #%>% filter(deltaTm < 10 & deltaTm > -10 )
# lizocimai_pagr
names(lizocimai_pagr) <- make.names(names(lizocimai_pagr))
lizocimai_pagr <- lizocimai_pagr %>%
mutate(WT = ifelse((str_detect(Protein, "WT\\*")) == TRUE, "wtx", "wt")) %>%
select(-Protein, -Activity, -Space.group, -Reoslution..A., -Comment, -Tm) %>%
rename(pdb = PDB.code, deltaTm = ΔTm, ddeltaG = ΔΔG ) %>%
mutate_if(is.character, as_factor)
lizocimai_pagr <- lizocimai_pagr %>%
mutate(Tm = if_else(WT == "wt", deltaTm + 67.2, deltaTm + 65.8))# %>%
#  filter(deltaTm < 10 & deltaTm > -10 )
lizocimai_pagr %>% filter(!is.na(pdb) & !is.na(Tm))
summary(lizocimai_pagr)
head(lizocimai_pagr)
readr::write_rds(lizocimai_pagr, "./data/pro_344_sm_suppinfo.rds")
lizocimai_stat_WT_T <- lizocimai_pagr %>% filter(deltaTm < 10 & deltaTm > -10 ) %>%
filter(!is.na(Tm)) %>%  data.frame()
lizocimai_stat_WT_T %>%
group_by(WT) %>%
summarise(Tm_vidurkis = mean(Tm),
Tm_mediana = median(Tm),
q1 = quantile(Tm, 0.25),
q3 = quantile(Tm, 0.75),
iqr = IQR(Tm),
apatinis = q1 - 3*iqr,
virsutinis = q3 + 3*iqr,
suma = n(),
turi_pdb = sum(!is.na(pdb)))
lizocimai_stat_WT_G <- lizocimai_pagr %>%
filter(!is.na(ddeltaG))
lizocimai_stat_WT_G %>%
group_by(WT) %>%
summarise(G_vidurkis = mean(ddeltaG),
G_mediana = median(ddeltaG),
q1 = quantile(ddeltaG, 0.25),
q3 = quantile(ddeltaG, 0.75),
suma = n(),
turi_pdb = sum(!is.na(pdb)))
lizocimai_stat_WT_pH <- lizocimai_pagr %>%
filter(!is.na(pH))
lizocimai_stat_WT_pH %>%
group_by(WT) %>%
summarise(pH_vidurkis = mean(pH),
pH_mediana = median(pH),
q1 = quantile(pH, 0.25),
q3 = quantile(pH, 0.75),
suma = n(),
turi_pdb = sum(!is.na(pdb)))
pav3 <- ggplot(lizocimai_stat_WT_T) +
aes(x = WT, y = Tm, fill = WT) +
geom_violin() +
geom_boxplot(width=0.1) +
scale_fill_hue() +
theme_light() +
theme(legend.position = "none") +
scale_y_continuous( limits=c(20, 100))
pav3
ggpubr::compare_means(lizocimai_stat_WT_T, Tm ~ WT)
ggplot(lizocimai_stat_WT_G) +
aes(x = WT, y = ddeltaG) +
geom_boxplot(fill = "#0c4c8a") +
theme_minimal()
ggplot(lizocimai_stat_WT_pH) +
aes(x = WT, y = pH) +
geom_boxplot(fill = "#ef562d") +
theme_minimal()
ggplot(lizocimai_pagr) +
aes(x = pH, y = Tm) +
geom_point(size = 1L, colour = "#0c4c8a") +
theme_minimal()
lizocimai_pagr <- lizocimai_pagr %>%
mutate(pH_grupe = as.factor(if_else(pH < 2.5, "pirma",
if_else(pH < 4, "antra",
if_else(pH < 6.1, "trecia", "ketvirta"))))) %>%
mutate(pH_grupe = fct_relevel(pH_grupe, "pirma", "antra", "trecia", "ketvirta")) %>%
filter(!is.na(pH_grupe))
head(lizocimai_pagr)
pav1 <- ggplot(lizocimai_pagr) +
aes(x = pH, y = Tm, colour = pH_grupe) +
geom_point(size = 1L) +
scale_color_hue() +
theme_minimal()
lizocimai_stat_ph_T <- lizocimai_pagr %>%
filter(!is.na(Tm) & !is.na(pH_grupe)) %>% filter(deltaTm < 10 & deltaTm > -10 )
lizocimai_stat_ph_T %>%
group_by(pH_grupe) %>%
summarise(Tm_vidurkis = mean(Tm),
Tm_mediana = median(Tm),
q1 = quantile(Tm, 0.25),
q3 = quantile(Tm, 0.75),
suma = n(),
turi_pdb = sum(!is.na(pdb)))
lizocimai_stat_ph_G <- lizocimai_pagr %>%
filter(!is.na(ddeltaG))
lizocimai_stat_ph_G %>%
group_by(pH_grupe) %>%
summarise(G_vidurkis = mean(ddeltaG),
G_mediana = median(ddeltaG),
q1 = quantile(ddeltaG, 0.25),
q3 = quantile(ddeltaG, 0.75),
suma = n(),
turi_pdb = sum(!is.na(pdb)))
pav2 <- ggplot(lizocimai_stat_ph_T) +
aes(x = pH_grupe, y = Tm, fill = pH_grupe ) +
geom_violin() +
geom_boxplot(width=0.1) + theme_minimal() +
scale_fill_hue() +
theme_light() +
theme(legend.position = "none") +
scale_y_continuous( limits=c(40, 100))
pav2
esquisse:::esquisser()
esquisse:::esquisser()
