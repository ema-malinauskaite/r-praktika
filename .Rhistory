nuline_lentele_atomu_grupiu_pavadinimai$antra <- rep(grupes_pavadinimai, times = nrow(grupavimo_lentele))
matrica_pavadinimams_nuline <- as.matrix(data.frame(grupe1 = nuline_lentele_atomu_grupiu_pavadinimai$pirma, grupe2 = nuline_lentele_atomu_grupiu_pavadinimai$antra))
nuline_lentele_atomu <- matrica_pavadinimams_nuline %>%
split(., row(.)) %>% sapply(
. %>% sort %>% paste(collapse = "-")
) %>% data.frame() %>%
rename("kontakto_tipas" = ".")
nuline_lentele_atomu$nuliai <- rep(0, times = nrow(nuline_lentele_atomu))
nuline_lentele_atomu <- nuline_lentele_atomu %>%
group_by(kontakto_tipas) %>%
summarise(nuliai = sum(nuliai)) %>%
transpose(make.names = "kontakto_tipas")%>% #!!!!!!!!
select(-"solvent-solvent")
#-------
#wtx ir wt standartiniu lenteliu sukurimas
lizocimo_kontaktai_wt <- data.table::fread("./lizocimai/2LZM.contacts.interatom.table", na.strings = ".")
lizocimo_kontaktai_wt <- lizocimo_kontaktai_wt %>%
mutate(V13 = recode_factor(V13, .missing = "solvent")) %>%
mutate(V14 = recode_factor(V14, .missing = "solvent"))
wt_atom <- fun_atomu_grupiu_sumoms(lizocimo_kontaktai_wt, grupavimo_lentele, nuline_lentele_atomu)
lizocimo_kontaktai_wtx <- data.table::fread("./lizocimai/1L63.contacts.interatom.table", na.strings = ".")
lizocimo_kontaktai_wtx <- lizocimo_kontaktai_wtx %>%
mutate(V13 = recode_factor(V13, .missing = "solvent")) %>%
mutate(V14 = recode_factor(V14, .missing = "solvent"))
wtx_atom <- fun_atomu_grupiu_sumoms(lizocimo_kontaktai_wtx,  grupavimo_lentele, nuline_lentele_atomu)
skaicius <- 0
#----
for (i in pdb_termo_lent$pdb) {
lizocimo_kontaktai <- data.table::fread(paste("./lizocimai/",i,".contacts.interatom.table", sep = ""), na.strings = ".")
skaicius <- skaicius +1
#print(skaicius)
lizocimo_kontaktai <- lizocimo_kontaktai %>%
mutate(V13 = recode_factor(V13, .missing = "solvent")) %>%
mutate(V14 = recode_factor(V14, .missing = "solvent"))
kontaktu_sumos_atom <- fun_atomu_grupiu_sumoms(lizocimo_kontaktai,  grupavimo_lentele, nuline_lentele_atomu)
viena_eilute <- pdb_termo_lent %>%
filter(pdb == i)
if (viena_eilute$WT == "wt") {
wt_ir_lizocimas_atom <- rbind(wt_atom, kontaktu_sumos_atom) %>%
transpose(keep.names = "kontakto_tipas") %>%
mutate(kont_sumu_skirtumas = V2 - V1) %>%
select(kontakto_tipas, kont_sumu_skirtumas) %>%
transpose(make.names = "kontakto_tipas")
} else {
wt_ir_lizocimas_atom <- rbind(wtx_atom, kontaktu_sumos_atom) %>%
transpose(keep.names = "kontakto_tipas") %>%
mutate(kont_sumu_skirtumas = V2 - V1) %>%
select(kontakto_tipas, kont_sumu_skirtumas) %>%
transpose(make.names = "kontakto_tipas")
}
visu_baltymu_kont_sumu_skirtumai <- rbind(visu_baltymu_kont_sumu_skirtumai, wt_ir_lizocimas_atom)
lizocimo_kontaktai = NULL
wt_ir_lizocimas_atom = NULL
}
termo_skirtumai <- pdb_termo_lent %>%
select(-WT, -pdb)
return(list(visu_baltymu_kont_sumu_skirtumai_atom = as.matrix(visu_baltymu_kont_sumu_skirtumai),termo_skirtumai_atom = as.matrix(termo_skirtumai)))
}
lizocimai_pagr <- readr::read_rds("./data/pro_344_sm_suppinfo.rds")
lizocimai_pagr_su_mutacijom <- readr::read_rds("./data/lizocimai_pagr_su_mutacijom.rds")
# Sukuriama tokia pati pdb_tm_wt_mut lnetele kaip skaiciavimui, tik su visais stulpeliais
pdb_tm_wt_mut_visi_stulpeliai <- lizocimai_pagr_su_mutacijom %>%
filter(pdb != "2LZM" & pdb != "1L63") %>%  .[-c(110,111, 116, 119),] %>%   filter(mut_skaicius < 1000) #%>% filter(deltaTm < 10 & deltaTm > -10)
lizocimai_pagr <- readr::read_rds("./data/pro_344_sm_suppinfo.rds")
lizocimai_pagr_su_mutacijom <- readr::read_rds("./data/lizocimai_pagr_su_mutacijom.rds")
# Sukuriama tokia pati pdb_tm_wt_mut lnetele kaip skaiciavimui, tik su visais stulpeliais
pdb_tm_wt_mut_visi_stulpeliai <- lizocimai_pagr_su_mutacijom %>%
filter(pdb != "2LZM" & pdb != "1L63") %>%  .[-c(110,111, 116, 119),] %>%   filter(mut_skaicius < 1000) #%>% filter(deltaTm < 10 & deltaTm > -10)
View(lizocimai_pagr_su_mutacijom)
##skaiciuoja kiek distinct values yra kiekviename kontaktu sumu stulpelyje, ty, kiek baltymu turi ta kontakta/-us, galima pabraizyti grafikeli, veikia paleidus visa koda zemiau
# A_skaiciavimai <- A_df %>%
#   summarise_all(n_distinct)
library("tidyverse")
library("data.table")
library("compareDF")
library("tidyr")
library("matlib")
library("pracma")
library("readr")
library("caret")
library(modelr)
library("esquisse")
#library("rapportools")
set.seed(6)
fun_atomu_grupiu_sumoms <- function(liz_kont, grupavimo_lentele, nuline_lentele_atomu) { #pirmas kintamasis - kontaktu failas su pridetais pavadinimais ar1_atom1
#-------
# Atomu pervadinimas pilnesniu pavadinimu
kontaktai_atomu_pavadinimai <- liz_kont %>%
select(V6, V7, V13, V14, V15) %>%
# filter(V13 != "solvent") %>%  # !!!!!!!!!!!!!!!
mutate(V7 = recode_factor(V7,"OXT" = "O")) %>%
mutate(V14 = recode_factor(V14,"OXT" = "O")) %>%
mutate(V6 = recode_factor(V6,"MSE" = "MET")) %>%
mutate(V13 = recode_factor(V13,"MSE" = "MET"))
kontaktai_atomu_pavadinimai$ar1_atom1 <- with(kontaktai_atomu_pavadinimai, paste0(V6,V7))
kontaktai_atomu_pavadinimai$ar2_atom2 <- with(kontaktai_atomu_pavadinimai, paste0(V13,V14))
#------
# Grupes priskyrimas kiekvienam atomui
kontaktai_atomu_pavadinimai <- kontaktai_atomu_pavadinimai %>%
mutate(grupe1 = 0) %>%
mutate(grupe2 = 0)
grupes_pavadinimai <- rownames(grupavimo_lentele)
for (i in grupes_pavadinimai) {
viena_eilute <- grupavimo_lentele[i,]
viena_eilute <- viena_eilute[,colSums(is.na(viena_eilute)) == 0]
for (j in viena_eilute) {
kontaktai_atomu_pavadinimai <- kontaktai_atomu_pavadinimai %>%
mutate(grupe1 = ifelse(ar1_atom1 == j, i, grupe1)) %>%
mutate(grupe2 = ifelse(ar2_atom2 == j, i, grupe2))
}
}
#-----
# Isrusiuotu pavadinimu grupe1-grupe2 sudarymas ir kontakto sumu skaiciavimas pagal grupes
matrica_pavadinimams <- as.matrix(data.frame(grupe1 = kontaktai_atomu_pavadinimai$grupe1, grupe2 = kontaktai_atomu_pavadinimai$grupe2))
surusiuoti_pavad <- matrica_pavadinimams %>%
split(., row(.)) %>% sapply(
. %>% sort %>% paste(collapse = "-")
) %>% data.frame
atom_kont_sumos <- cbind(kontaktai_atomu_pavadinimai, surusiuoti_pavad) %>%
rename(kontakto_tipas = ".") %>%
group_by(kontakto_tipas) %>%
summarise(kontakto_suma = sum(V15))
#-----
# Standartizavimas
atom_kont_sumos <- spread(atom_kont_sumos, kontakto_tipas, kontakto_suma)
sujungta <- full_join(nuline_lentele_atomu, atom_kont_sumos) %>%
gather() %>%
group_by(key) %>%
summarise(kontakto_suma = sum(value)) %>%
mutate_all(~replace(., is.na(.), 0)) %>%
spread(., key, kontakto_suma)
#----------
return(sujungta)
}
fun_matricu_paruosimas_atom <- function(pdb_termo_lent, grupavimo_failas) {
visu_baltymu_kont_sumu_skirtumai <- data.frame()
termo_skirtumai <- data.frame() #desine tiesiniu lygciu sistemos puse matricose
#----
#Grupavimo lenteles sukurimas (reiklainga kitai funkcijai)
grupavimo_lentele <- grupavimo_failas %>%
mutate_all(na_if,"") %>%
tibble::column_to_rownames(var = "V1") %>% #!!!!!!!!!!!!!!!!
rbind(solvent = c("solventsolvent")) #!!!!!!!!!!!!!!!
#-------
# Nulines lenteles kurimas (reikalinga kitai funkcijai)
grupes_pavadinimai <- rownames(grupavimo_lentele)
nuline_lentele_atomu_grupiu_pavadinimai<- data.frame(1:(nrow(grupavimo_lentele)^2))
nuline_lentele_atomu_grupiu_pavadinimai$pirma <- data.frame(rep(grupes_pavadinimai, each = nrow(grupavimo_lentele)))
nuline_lentele_atomu_grupiu_pavadinimai$antra <- rep(grupes_pavadinimai, times = nrow(grupavimo_lentele))
matrica_pavadinimams_nuline <- as.matrix(data.frame(grupe1 = nuline_lentele_atomu_grupiu_pavadinimai$pirma, grupe2 = nuline_lentele_atomu_grupiu_pavadinimai$antra))
nuline_lentele_atomu <- matrica_pavadinimams_nuline %>%
split(., row(.)) %>% sapply(
. %>% sort %>% paste(collapse = "-")
) %>% data.frame() %>%
rename("kontakto_tipas" = ".")
nuline_lentele_atomu$nuliai <- rep(0, times = nrow(nuline_lentele_atomu))
nuline_lentele_atomu <- nuline_lentele_atomu %>%
group_by(kontakto_tipas) %>%
summarise(nuliai = sum(nuliai)) %>%
transpose(make.names = "kontakto_tipas")%>% #!!!!!!!!
select(-"solvent-solvent")
#-------
#wtx ir wt standartiniu lenteliu sukurimas
lizocimo_kontaktai_wt <- data.table::fread("./lizocimai/2LZM.contacts.interatom.table", na.strings = ".")
lizocimo_kontaktai_wt <- lizocimo_kontaktai_wt %>%
mutate(V13 = recode_factor(V13, .missing = "solvent")) %>%
mutate(V14 = recode_factor(V14, .missing = "solvent"))
wt_atom <- fun_atomu_grupiu_sumoms(lizocimo_kontaktai_wt, grupavimo_lentele, nuline_lentele_atomu)
lizocimo_kontaktai_wtx <- data.table::fread("./lizocimai/1L63.contacts.interatom.table", na.strings = ".")
lizocimo_kontaktai_wtx <- lizocimo_kontaktai_wtx %>%
mutate(V13 = recode_factor(V13, .missing = "solvent")) %>%
mutate(V14 = recode_factor(V14, .missing = "solvent"))
wtx_atom <- fun_atomu_grupiu_sumoms(lizocimo_kontaktai_wtx,  grupavimo_lentele, nuline_lentele_atomu)
skaicius <- 0
#----
for (i in pdb_termo_lent$pdb) {
lizocimo_kontaktai <- data.table::fread(paste("./lizocimai/",i,".contacts.interatom.table", sep = ""), na.strings = ".")
skaicius <- skaicius +1
#print(skaicius)
lizocimo_kontaktai <- lizocimo_kontaktai %>%
mutate(V13 = recode_factor(V13, .missing = "solvent")) %>%
mutate(V14 = recode_factor(V14, .missing = "solvent"))
kontaktu_sumos_atom <- fun_atomu_grupiu_sumoms(lizocimo_kontaktai,  grupavimo_lentele, nuline_lentele_atomu)
viena_eilute <- pdb_termo_lent %>%
filter(pdb == i)
if (viena_eilute$WT == "wt") {
wt_ir_lizocimas_atom <- rbind(wt_atom, kontaktu_sumos_atom) %>%
transpose(keep.names = "kontakto_tipas") %>%
mutate(kont_sumu_skirtumas = V2 - V1) %>%
select(kontakto_tipas, kont_sumu_skirtumas) %>%
transpose(make.names = "kontakto_tipas")
} else {
wt_ir_lizocimas_atom <- rbind(wtx_atom, kontaktu_sumos_atom) %>%
transpose(keep.names = "kontakto_tipas") %>%
mutate(kont_sumu_skirtumas = V2 - V1) %>%
select(kontakto_tipas, kont_sumu_skirtumas) %>%
transpose(make.names = "kontakto_tipas")
}
visu_baltymu_kont_sumu_skirtumai <- rbind(visu_baltymu_kont_sumu_skirtumai, wt_ir_lizocimas_atom)
lizocimo_kontaktai = NULL
wt_ir_lizocimas_atom = NULL
}
termo_skirtumai <- pdb_termo_lent %>%
select(-WT, -pdb)
return(list(visu_baltymu_kont_sumu_skirtumai_atom = as.matrix(visu_baltymu_kont_sumu_skirtumai),termo_skirtumai_atom = as.matrix(termo_skirtumai)))
}
lizocimai_pagr <- readr::read_rds("./data/pro_344_sm_suppinfo.rds")
lizocimai_pagr_su_mutacijom <- readr::read_rds("./data/lizocimai_pagr_su_mutacijom.rds")
# Sukuriama tokia pati pdb_tm_wt_mut lnetele kaip skaiciavimui, tik su visais stulpeliais
pdb_tm_wt_mut_visi_stulpeliai <- lizocimai_pagr_su_mutacijom %>%
filter(pdb != "2LZM" & pdb != "1L63") %>%  .[-c(110,111, 116, 119),] %>%   filter(mut_skaicius < 1000) #%>% filter(deltaTm < 10 & deltaTm > -10)
pdb_tm_wt_mut <- pdb_tm_wt_mut_visi_stulpeliai %>%
select(pdb, deltaTm, WT)
pdb_tm_wt_mut_visi_stulpeliai
pdb_tm_wt_mut
# Atomu tipu nuskaitymas cikle
for(e in c("RES_MCSC"
)) {
atom_types_parsiuntimui <- e
grupavimo_failas <- data.table::fread(paste0("/Users/user/Desktop/praktika/r-praktika/atom_types/",atom_types_parsiuntimui, ".atoms"),
dec = ".", header = FALSE, skip = 1, encoding = "UTF-8", fill = TRUE,
data.table = FALSE
)
atom_types <- paste0(e, "_BAKIUI_pasalinus_110_111_116_119_PATIKRINIMUI_TIESIOG") # Pavadinimo dalis, kuri nusako koks atomu grupavimo tipas, bei kita info
print(atom_types)
try({
if(nrow(grupavimo_failas) < 24) {
#----
# Reiklaingu matricu sukurimas
matricu_lenteles <- fun_matricu_paruosimas_atom(pdb_termo_lent = pdb_tm_wt_mut, grupavimo_failas = grupavimo_failas)
A <- matricu_lenteles$visu_baltymu_kont_sumu_skirtumai_atom
b <- c(matricu_lenteles$termo_skirtumai_atom)
#Patikrinimas, kiek yra eiluciu, kuriose tik 1-2 baltymai su tuo kontakto tipu
kontaktu_sumos_wt_ir_wtx <- data.table(A)
kontaktu_sumos_wt_ir_wtx_susumuotos <- kontaktu_sumos_wt_ir_wtx %>%
summarise_all(n_distinct)
if(!rapportools::is.empty(which(kontaktu_sumos_wt_ir_wtx_susumuotos < 3))) {
isfiltruoti_kontaktus <- kontaktu_sumos_wt_ir_wtx_susumuotos[which(kontaktu_sumos_wt_ir_wtx_susumuotos < 3)] %>%
transpose(keep.names = "pavadinimai") %>%
rename("wt_ir_wtx" = "V1")
}
#patikrinus kokie kontaktai yra reti, kai kurie isfiltruojami
if(!rapportools::is.empty(which(kontaktu_sumos_wt_ir_wtx_susumuotos < 3))) {
A <- A %>% data.table() %>%
select(-as.vector(isfiltruoti_kontaktus$pavadinimai)) %>% as.matrix()
}
duomenys_cv <- data.table(b, A)
isfiltruoti_kontaktus <- NULL
#----------
# TLS be CV
tls_sprendimas_visi_baltymai <-
pracma::qrSolve(A, b)
apsk_temp_is_visu <-
A %*% tls_sprendimas_visi_baltymai
apsk_ir_teor_temp_is_visu <- cbind(pdb_tm_wt_mut_visi_stulpeliai, data.frame(apsk_temp_is_visu))
apsk_ir_teor_temp_is_visu
saveRDS(apsk_ir_teor_temp_is_visu, file =
paste0("rds-failai/apsk_ir_teor_temp_is_visu-",atom_types,".rds"))
#------
r2_is_visu_lm <- lm(apsk_temp_is_visu ~ deltaTm, data=apsk_ir_teor_temp_is_visu)
r2_is_visu <- summary(r2_is_visu_lm)$r.squared
saveRDS(r2_is_visu, file =
paste0("rds-failai/r2_is_visu-",atom_types,".rds"))
# #LOOCV
# # #------
# eil_skaicius <- nrow(duomenys_cv)
# apsk_temp_loo_cv <- data.frame()
#
# for (i in 1:eil_skaicius) {
# print(i)
# #Duomenys suskirstomi i train ir test
# train_loo <- duomenys_cv[-i,]
# test_loo <- duomenys_cv[i,]
#
# #Atskiriamas train temperaturos stulpelis nuo kontaktu plotu stulpeliu
# train_loo_teor_temp <- train_loo[,1]
# train_loo_kontaktai <- train_loo[,-1]
#
# #Apskaiciuojami koeficientai
# koef_loo <- pracma::qrSolve(as.matrix(train_loo_kontaktai), as.matrix(train_loo_teor_temp))
#
# #5
# #Atskiriamas test temperaturos stulpelis nuo kontaktu plotu stulpeliu
# test_loo_teor_temp <- test_loo[,1]
# test_loo_kontaktai <- test_loo[,-1]
#
# #Apskaiciuojamos temperaturos (test_kontaktaiXkoef)
# apsk_temp_loo_eil <- as.matrix(test_loo_kontaktai) %*% koef_loo
#
# #Sudaroma teoriniu ir apskaiciuotu temperaturu lentele
# apsk_temp_loo_cv <- rbind(apsk_temp_loo_cv, data.frame(apsk_temp_loo_eil))
# }
#
# apsk_ir_teor_temp_loo_cv <- data.frame(cbind(pdb_tm_wt_mut_visi_stulpeliai, apsk_temp_loo_cv)) %>%
#   rename("apsk_temp_loo" = "apsk_temp_loo_eil")
#
# saveRDS(apsk_ir_teor_temp_loo_cv, file =
#   paste0("rds-failai/apsk_ir_teor_temp_loo_cv-",atom_types,".rds"))
#
# # r2 apskaiciavimas:
# r2_cv_loo_lm <- lm(apsk_temp_loo ~ deltaTm, data=apsk_ir_teor_temp_loo_cv)
# r2_cv_loo <- summary(r2_cv_loo_lm)$r.squared
#
#  saveRDS(r2_cv_loo, file =
#    paste0("rds-failai/r2_cv_loo-",atom_types,".rds"))
#
# # Visi grafikai:
#
# be_cv_grafikas <- ggplot(apsk_ir_teor_temp_is_visu) +
# aes(x = deltaTm, y = apsk_temp_is_visu, color = WT) +
#     labs(x = "Teorinis temperaturu skirtumas",
#          y = "Apskaiciuotas temperaturu skirtumas",
#          title = paste0("Be CV (", atom_types, ")"),
#          subtitle = paste0("r2 = ",r2_is_visu)
#        ) +
#  geom_point(size = 1L) +
#   theme_light()
# #
# cv_loo_grafikas <- ggplot(apsk_ir_teor_temp_loo_cv) +
#  aes(x = deltaTm, y = apsk_temp_loo, color = WT) +
#     labs(x = "Teorinis temperaturu skirtumas",
#          y = "Apskaiciuotas temperaturu skirtumas",
#          title = paste0("LOOCV (", atom_types, ")"),
#          subtitle = paste0("r2 = ", r2_cv_loo)
#          ) +
#  geom_point(size = 1L) +
#  theme_light()
#
# cv_loo_grafikas_filtered <- ggplot(apsk_ir_teor_temp_loo_cv %>% filter(apsk_temp_loo > (-100) & apsk_temp_loo < 100)) +
#  aes(x = deltaTm, y = apsk_temp_loo, color = WT) +
#     labs(x = "Teorinis temperaturu skirtumas",
#          y = "Apskaiciuotas temperaturu skirtumas",
#          title = paste0("LOOCV (", atom_types, ")"),
#          subtitle = paste0("r2 = ", r2_cv_loo)) +
#  geom_point(size = 1L) +
#  theme_light()
#
# ggsave(be_cv_grafikas, device = "jpeg",filename = paste0(atom_types, "_be_cv.jpeg") ,path = "/Users/user/Desktop/praktika/r-praktika/grafikai")
#
# ggsave(cv_loo_grafikas, device = "jpeg",filename = paste0(atom_types, "_loo_cv.jpeg") ,path = "/Users/user/Desktop/praktika/r-praktika/grafikai")
#
# ggsave(cv_loo_grafikas_filtered, device = "jpeg",filename = paste0(atom_types, "_loo_cv_filtered.jpeg") ,path = "/Users/user/Desktop/praktika/r-praktika/grafikai")
}
})
}
ggplot_to_ppt("cv_loo_grafikas_filtered")
View(A)
apsk_ir_teor_temp_is_visu
tls_sprendimas_visi_baltymai
#-----
grupavimo_lentele <- grupavimo_failas %>%
mutate_all(na_if,"") %>%
tibble::column_to_rownames(var = "V1") %>%
rbind(solvent = c("solventsolvent"))
grupes_pavadinimai <- rownames(grupavimo_lentele)
nuline_lentele_atomu_grupiu_pavadinimai<- data.frame(1:(nrow(grupavimo_lentele)^2))
nuline_lentele_atomu_grupiu_pavadinimai$pirma <- data.frame(rep(grupes_pavadinimai, each = nrow(grupavimo_lentele)))
nuline_lentele_atomu_grupiu_pavadinimai$antra <- rep(grupes_pavadinimai, times = nrow(grupavimo_lentele))
matrica_pavadinimams_nuline <- as.matrix(data.frame(grupe1 = nuline_lentele_atomu_grupiu_pavadinimai$pirma, grupe2 = nuline_lentele_atomu_grupiu_pavadinimai$antra))
nuline_lentele_atomu <- matrica_pavadinimams_nuline %>%
split(., row(.)) %>% sapply(
. %>% sort %>% paste(collapse = "-")
) %>% data.frame() %>%
rename("kontakto_tipas" = ".")
nuline_lentele_atomu$nuliai <- rep(0, times = nrow(nuline_lentele_atomu))
nuline_lentele_atomu <- nuline_lentele_atomu %>%
group_by(kontakto_tipas) %>%
summarise(nuliai = sum(nuliai)) %>%
transpose(make.names = "kontakto_tipas")%>%
select(-"solvent-solvent")
pavadinimai <- data.table(nuline_lentele_atomu) %>%
transpose(keep.names = "kontakto_tipas") %>%
select(-V1)
#-----
grupavimo_lentele <- grupavimo_failas %>%
mutate_all(na_if,"") %>%
tibble::column_to_rownames(var = "V1") %>%
rbind(solvent = c("solventsolvent"))
grupes_pavadinimai <- rownames(grupavimo_lentele)
nuline_lentele_atomu_grupiu_pavadinimai<- data.frame(1:(nrow(grupavimo_lentele)^2))
nuline_lentele_atomu_grupiu_pavadinimai$pirma <- data.frame(rep(grupes_pavadinimai, each = nrow(grupavimo_lentele)))
nuline_lentele_atomu_grupiu_pavadinimai$antra <- rep(grupes_pavadinimai, times = nrow(grupavimo_lentele))
matrica_pavadinimams_nuline <- as.matrix(data.frame(grupe1 = nuline_lentele_atomu_grupiu_pavadinimai$pirma, grupe2 = nuline_lentele_atomu_grupiu_pavadinimai$antra))
nuline_lentele_atomu <- matrica_pavadinimams_nuline %>%
split(., row(.)) %>% sapply(
. %>% sort %>% paste(collapse = "-")
) %>% data.frame() %>%
rename("kontakto_tipas" = ".")
nuline_lentele_atomu$nuliai <- rep(0, times = nrow(nuline_lentele_atomu))
nuline_lentele_atomu <- nuline_lentele_atomu %>%
group_by(kontakto_tipas) %>%
summarise(nuliai = sum(nuliai)) %>%
transpose(make.names = "kontakto_tipas")%>%
select(-"solvent-solvent")
pavadinimai <- data.table(nuline_lentele_atomu) %>%
transpose(keep.names = "kontakto_tipas") %>%
select(-V1)
pavadinimai
#-----
grupavimo_lentele <- grupavimo_failas %>%
mutate_all(na_if,"") %>%
tibble::column_to_rownames(var = "V1") %>%
rbind(solvent = c("solventsolvent"))
grupes_pavadinimai <- rownames(grupavimo_lentele)
nuline_lentele_atomu_grupiu_pavadinimai<- data.frame(1:(nrow(grupavimo_lentele)^2))
nuline_lentele_atomu_grupiu_pavadinimai$pirma <- data.frame(rep(grupes_pavadinimai, each = nrow(grupavimo_lentele)))
nuline_lentele_atomu_grupiu_pavadinimai$antra <- rep(grupes_pavadinimai, times = nrow(grupavimo_lentele))
matrica_pavadinimams_nuline <- as.matrix(data.frame(grupe1 = nuline_lentele_atomu_grupiu_pavadinimai$pirma, grupe2 = nuline_lentele_atomu_grupiu_pavadinimai$antra))
nuline_lentele_atomu <- matrica_pavadinimams_nuline %>%
split(., row(.)) %>% sapply(
. %>% sort %>% paste(collapse = "-")
) %>% data.frame() %>%
rename("kontakto_tipas" = ".")
nuline_lentele_atomu$nuliai <- rep(0, times = nrow(nuline_lentele_atomu))
nuline_lentele_atomu <- nuline_lentele_atomu %>%
group_by(kontakto_tipas) %>%
summarise(nuliai = sum(nuliai)) %>%
transpose(make.names = "kontakto_tipas")%>%
select(-"solvent-solvent")
pavadinimai <- data.table(nuline_lentele_atomu) %>%
transpose(keep.names = "kontakto_tipas") %>%
select(-V1)
pavadinimai %>%
select(-as.vector(isfiltruoti_kontaktus$pavadinimai))
#-----
grupavimo_lentele <- grupavimo_failas %>%
mutate_all(na_if,"") %>%
tibble::column_to_rownames(var = "V1") %>%
rbind(solvent = c("solventsolvent"))
grupes_pavadinimai <- rownames(grupavimo_lentele)
nuline_lentele_atomu_grupiu_pavadinimai<- data.frame(1:(nrow(grupavimo_lentele)^2))
nuline_lentele_atomu_grupiu_pavadinimai$pirma <- data.frame(rep(grupes_pavadinimai, each = nrow(grupavimo_lentele)))
nuline_lentele_atomu_grupiu_pavadinimai$antra <- rep(grupes_pavadinimai, times = nrow(grupavimo_lentele))
matrica_pavadinimams_nuline <- as.matrix(data.frame(grupe1 = nuline_lentele_atomu_grupiu_pavadinimai$pirma, grupe2 = nuline_lentele_atomu_grupiu_pavadinimai$antra))
nuline_lentele_atomu <- matrica_pavadinimams_nuline %>%
split(., row(.)) %>% sapply(
. %>% sort %>% paste(collapse = "-")
) %>% data.frame() %>%
rename("kontakto_tipas" = ".")
nuline_lentele_atomu$nuliai <- rep(0, times = nrow(nuline_lentele_atomu))
nuline_lentele_atomu <- nuline_lentele_atomu %>%
group_by(kontakto_tipas) %>%
summarise(nuliai = sum(nuliai)) %>%
transpose(make.names = "kontakto_tipas")%>%
select(-"solvent-solvent")
pavadinimai <- data.table(nuline_lentele_atomu) %>%
transpose(keep.names = "kontakto_tipas") %>%
select(-V1)
pavadinimai %>%
filter(!as.vector(isfiltruoti_kontaktus$pavadinimai))
#-----
grupavimo_lentele <- grupavimo_failas %>%
mutate_all(na_if,"") %>%
tibble::column_to_rownames(var = "V1") %>%
rbind(solvent = c("solventsolvent"))
grupes_pavadinimai <- rownames(grupavimo_lentele)
nuline_lentele_atomu_grupiu_pavadinimai<- data.frame(1:(nrow(grupavimo_lentele)^2))
nuline_lentele_atomu_grupiu_pavadinimai$pirma <- data.frame(rep(grupes_pavadinimai, each = nrow(grupavimo_lentele)))
nuline_lentele_atomu_grupiu_pavadinimai$antra <- rep(grupes_pavadinimai, times = nrow(grupavimo_lentele))
matrica_pavadinimams_nuline <- as.matrix(data.frame(grupe1 = nuline_lentele_atomu_grupiu_pavadinimai$pirma, grupe2 = nuline_lentele_atomu_grupiu_pavadinimai$antra))
nuline_lentele_atomu <- matrica_pavadinimams_nuline %>%
split(., row(.)) %>% sapply(
. %>% sort %>% paste(collapse = "-")
) %>% data.frame() %>%
rename("kontakto_tipas" = ".")
nuline_lentele_atomu$nuliai <- rep(0, times = nrow(nuline_lentele_atomu))
nuline_lentele_atomu <- nuline_lentele_atomu %>%
group_by(kontakto_tipas) %>%
summarise(nuliai = sum(nuliai)) %>%
transpose(make.names = "kontakto_tipas")%>%
select(-"solvent-solvent")
pavadinimai <- data.table(nuline_lentele_atomu) %>%
transpose(keep.names = "kontakto_tipas") %>%
select(-V1)
pavadinimai %>%
filter(pavadinimai != as.vector(isfiltruoti_kontaktus$pavadinimai))
pavadinimai
#-----
grupavimo_lentele <- grupavimo_failas %>%
mutate_all(na_if,"") %>%
tibble::column_to_rownames(var = "V1") %>%
rbind(solvent = c("solventsolvent"))
grupes_pavadinimai <- rownames(grupavimo_lentele)
nuline_lentele_atomu_grupiu_pavadinimai<- data.frame(1:(nrow(grupavimo_lentele)^2))
nuline_lentele_atomu_grupiu_pavadinimai$pirma <- data.frame(rep(grupes_pavadinimai, each = nrow(grupavimo_lentele)))
nuline_lentele_atomu_grupiu_pavadinimai$antra <- rep(grupes_pavadinimai, times = nrow(grupavimo_lentele))
matrica_pavadinimams_nuline <- as.matrix(data.frame(grupe1 = nuline_lentele_atomu_grupiu_pavadinimai$pirma, grupe2 = nuline_lentele_atomu_grupiu_pavadinimai$antra))
nuline_lentele_atomu <- matrica_pavadinimams_nuline %>%
split(., row(.)) %>% sapply(
. %>% sort %>% paste(collapse = "-")
) %>% data.frame() %>%
rename("kontakto_tipas" = ".")
nuline_lentele_atomu$nuliai <- rep(0, times = nrow(nuline_lentele_atomu))
nuline_lentele_atomu <- nuline_lentele_atomu %>%
group_by(kontakto_tipas) %>%
summarise(nuliai = sum(nuliai)) %>%
transpose(make.names = "kontakto_tipas")%>%
select(-"solvent-solvent")
pavadinimai <- data.table(nuline_lentele_atomu) %>%
transpose(keep.names = "kontakto_tipas") %>%
select(-V1)
pavadinimai %>%
filter(kontakto_tipas != as.vector(isfiltruoti_kontaktus$pavadinimai))
isfiltruoti_kontaktus$pavadinimai
koef_su_pavad <- cbind(pavadinimai, data.frame(tls_sprendimas_visi_baltymai)) %>% arrange(tls_sprendimas_visi_baltymai)
koef_su_pavad
koef_su_pavad <- cbind(pavadinimai, data.frame(tls_sprendimas_visi_baltymai))
koef_su_pavad
koef_su_pavad <- cbind(pavadinimai, data.frame(round(tls_sprendimas_visi_baltymai, 4))
koef_su_pavad
koef_su_pavad <- cbind(pavadinimai, data.frame(round(tls_sprendimas_visi_baltymai, 4)))
koef_su_pavad
