} else {
wt_ir_lizocimas_atom <- rbind(wtx_atom, kontaktu_sumos_atom) %>%
transpose(keep.names = "kontakto_tipas") %>%
mutate(kont_sumu_skirtumas = V1 - V2) %>%
select(kontakto_tipas, kont_sumu_skirtumas) %>%
transpose(make.names = "kontakto_tipas")
}
visu_baltymu_kont_sumu_skirtumai <- rbind(visu_baltymu_kont_sumu_skirtumai, wt_ir_lizocimas_atom)
lizocimo_kontaktai = NULL
}
termo_skirtumai <- pdb_termo_lent %>%
select(-WT, -pdb)
return(list(visu_baltymu_kont_sumu_skirtumai_atom = as.matrix(visu_baltymu_kont_sumu_skirtumai),termo_skirtumai_atom = as.matrix(termo_skirtumai)))
}
rezultatai_2 <- fun_matricu_paruosimas_atom(pdb_tm_pvz, grupavimo_failas)
rezultatai_2 <- fun_matricu_paruosimas_atom(pdb_tm_pvz, grupavimo_failas)
rezultatai_2$visu_baltymu_kont_sumu_skirtumai_atom
rezultatai_2$termo_skirtumai_atom
library("tidyverse")
library("data.table")
library("compareDF")
library("tidyr")
library("matlib")
fun_atomu_grupiu_sumoms <- function(liz_kont, grupavimo_failas) { #pirmas kintamasis- kontaktu failas su pridetais pavadinimais ar1_atom1,
#-------
# atomu pervadinimas pilnesniu pavadinimu
kontaktai_atomu_pavadinimai <- liz_kont %>%
select(V6, V7, V13, V14, V15) %>%
filter(V13 != ".") %>%
filter(V7 != "OXT") %>% #!!!!!!!!!!!!!!!!!
filter(V14 != "OXT") %>% #!!!!!!!!!!!!!!!!!
mutate(V6 = recode_factor(V6,"MSE" = "MET")) %>%
mutate(V13 = recode_factor(V13,"MSE" = "MET"))
kontaktai_atomu_pavadinimai$ar1_atom1 <- with(kontaktai_atomu_pavadinimai, paste0(V6,V7))
kontaktai_atomu_pavadinimai$ar2_atom2 <- with(kontaktai_atomu_pavadinimai, paste0(V13,V14))
#------
# Grupes priskyrimas kiekvienam atomui
grupavimo_lentele <- grupavimo_failas %>%
mutate_all(na_if,"") %>%
tibble::column_to_rownames(var = "V1")
grupes_pavadinimai <- rownames(grupavimo_lentele)
kontaktai_atomu_pavadinimai <- kontaktai_atomu_pavadinimai %>%
mutate(grupe1 = 0) %>%
mutate(grupe2 = 0)
for (i in grupes_pavadinimai) {
viena_eilute <- grupavimo_lentele[i,]
viena_eilute <- viena_eilute[,colSums(is.na(viena_eilute)) == 0]
for (j in viena_eilute) {
kontaktai_atomu_pavadinimai <- kontaktai_atomu_pavadinimai %>%
mutate(grupe1 = ifelse(ar1_atom1 == j, i, grupe1)) %>%
mutate(grupe2 = ifelse(ar2_atom2 == j, i, grupe2))
}
}
#-----
# Isrusiuotu pavadinimu grupe1-grupe2 sudarymas ir kontakto sumu skaiciavimas pagal grupes
matrica_pavadinimams <- as.matrix(data.frame(grupe1 = kontaktai_atomu_pavadinimai$grupe1, grupe2 = kontaktai_atomu_pavadinimai$grupe2))
surusiuoti_pavad <- matrica_pavadinimams %>%
split(., row(.)) %>% sapply(
. %>% sort %>% paste(collapse = "-")
) %>% data.frame
atom_kont_sumos <- cbind(kontaktai_atomu_pavadinimai, surusiuoti_pavad) %>%
rename(kontakto_tipas = ".") %>%
group_by(kontakto_tipas) %>%
summarise(kontakto_suma = sum(V15))
#-----
# Nulines lenteles kurimas
grupavimo_lentele <- grupavimo_failas %>%
mutate_all(na_if,"") %>%
tibble::column_to_rownames(var = "V1")
grupes_pavadinimai <- rownames(grupavimo_lentele)
nuline_lentele_atomu_grupiu_pavadinimai<- data.frame(1:(nrow(grupavimo_lentele)^2))
nuline_lentele_atomu_grupiu_pavadinimai$pirma <- data.frame(rep(grupes_pavadinimai, each = nrow(grupavimo_lentele)))
nuline_lentele_atomu_grupiu_pavadinimai$antra <- rep(grupes_pavadinimai, times = nrow(grupavimo_lentele))
matrica_pavadinimams_nuline <- as.matrix(data.frame(grupe1 = nuline_lentele_atomu_grupiu_pavadinimai$pirma, grupe2 = nuline_lentele_atomu_grupiu_pavadinimai$antra))
nuline_lentele_atomu <- matrica_pavadinimams_nuline %>%
split(., row(.)) %>% sapply(
. %>% sort %>% paste(collapse = "-")
) %>% data.frame() %>%
rename("kontakto_tipas" = ".")
nuline_lentele_atomu$nuliai <- rep(0, times = nrow(nuline_lentele_atomu))
nuline_lentele_atomu <- nuline_lentele_atomu %>%
group_by(kontakto_tipas) %>%
summarise(nuliai = sum(nuliai)) %>%
transpose(make.names = "kontakto_tipas")
nuline_lentele_atomu
#-----
# Standartizavimas
atom_kont_sumos <- spread(atom_kont_sumos, kontakto_tipas, kontakto_suma)
sujungta <- full_join(nuline_lentele_atomu, atom_kont_sumos) %>%
gather() %>%
group_by(key) %>%
summarise(kontakto_suma = sum(value)) %>%
mutate_all(~replace(., is.na(.), 0)) %>%
spread(., key, kontakto_suma)
#----------
return(sujungta)
}
lizocimo_atom_kontaktai_1L63 <- data.table::fread("./lizocimai/1L63.contacts.interatom.table")
grupavimo_failas <- data.table::fread(
"/Users/user/Desktop/praktika/r-praktika/atom types/FTA.atoms",
dec = ".", header = FALSE, skip = 1, encoding = "UTF-8", fill = TRUE,
data.table = FALSE
)
rezultatai <- fun_atomu_grupiu_sumoms(lizocimo_atom_kontaktai_1L63, grupavimo_failas)
rezultatai
fun_matricu_paruosimas_atom <- function(pdb_termo_lent, grupavimo_failas) {
visu_baltymu_kont_sumu_skirtumai <- data.frame()
termo_skirtumai <- data.frame() #desine tiesiniu lygciu sistemos puse matricose
#----
#wtx ir wt standartiniu lenteliu sukurimas
lizocimo_kontaktai_wt <- data.table::fread("./lizocimai/2LZM.contacts.interatom.table")
wt_atom <- fun_atomu_grupiu_sumoms(lizocimo_kontaktai_wt, grupavimo_failas)
lizocimo_kontaktai_wtx <- data.table::fread("./lizocimai/1L63.contacts.interatom.table")
wtx_atom <- fun_atomu_grupiu_sumoms(lizocimo_kontaktai_wtx, grupavimo_failas)
#----
for (i in pdb_termo_lent$pdb) {
lizocimo_kontaktai <- data.table::fread(paste("./lizocimai/",i,".contacts.interatom.table", sep = ""))
kontaktu_sumos_atom <- fun_atomu_grupiu_sumoms(lizocimo_kontaktai, grupavimo_failas)
viena_eilute <- pdb_termo_lent %>%
filter(pdb == i)
if (viena_eilute$WT == "wt") {
wt_ir_lizocimas_atom <- rbind(wt_atom, kontaktu_sumos_atom) %>%
transpose(keep.names = "kontakto_tipas") %>%
mutate(kont_sumu_skirtumas = V1 - V2) %>%
select(kontakto_tipas, kont_sumu_skirtumas) %>%
transpose(make.names = "kontakto_tipas")
} else {
wt_ir_lizocimas_atom <- rbind(wtx_atom, kontaktu_sumos_atom) %>%
transpose(keep.names = "kontakto_tipas") %>%
mutate(kont_sumu_skirtumas = V1 - V2) %>%
select(kontakto_tipas, kont_sumu_skirtumas) %>%
transpose(make.names = "kontakto_tipas")
}
visu_baltymu_kont_sumu_skirtumai <- rbind(visu_baltymu_kont_sumu_skirtumai, wt_ir_lizocimas_atom)
lizocimo_kontaktai = NULL
}
termo_skirtumai <- pdb_termo_lent %>%
select(-WT, -pdb)
return(list(visu_baltymu_kont_sumu_skirtumai_atom = as.matrix(visu_baltymu_kont_sumu_skirtumai),termo_skirtumai_atom = as.matrix(termo_skirtumai)))
}
grupavimo_failas <- data.table::fread(
"/Users/user/Desktop/praktika/r-praktika/atom types/FTA.atoms",
dec = ".", header = FALSE, skip = 1, encoding = "UTF-8", fill = TRUE,
data.table = FALSE
)
lizocimai_pagr <- readr::read_rds("./data/pro_344_sm_suppinfo.rds")
pdb_tm_pvz <- lizocimai_pagr %>%
filter(pdb != "2LZM" & pdb != "1L63") %>%
select(pdb, deltaTm, WT) %>%
drop_na(pdb, deltaTm) %>%
head()
pdb_tm_pvz
# rezultatai_2 <- fun_matricu_paruosimas_atom(pdb_tm_pvz, grupavimo_failas)
# rezultatai_2$visu_baltymu_kont_sumu_skirtumai_atom
# rezultatai_2$termo_skirtumai_atom
rezultatai_2 <- fun_matricu_paruosimas_atom(pdb_tm_pvz, grupavimo_failas)
rezultatai_2$visu_baltymu_kont_sumu_skirtumai_atom
rezultatai_2$termo_skirtumai_atom
grupavimo_failas <- data.table::fread(
"/Users/user/Desktop/praktika/r-praktika/atom types/FTA.atoms",
dec = ".", header = FALSE, skip = 1, encoding = "UTF-8", fill = TRUE,
data.table = FALSE
)
lizocimai_pagr <- readr::read_rds("../data/pro_344_sm_suppinfo.rds")
grupavimo_failas <- data.table::fread(
"/Users/user/Desktop/praktika/r-praktika/atom types/FTA.atoms",
dec = ".", header = FALSE, skip = 1, encoding = "UTF-8", fill = TRUE,
data.table = FALSE
)
lizocimai_pagr <- readr::read_rds("./data/pro_344_sm_suppinfo.rds")
pdb_tm_wt <- lizocimai_pagr %>%
select(pdb, deltaTm, WT) %>%
drop_na(pdb, deltaTm) %>%
filter(pdb != "2LZM" & pdb != "1L63") %>%
head()
pdb_tm_wt
matricu_lenteles <- fun_matricu_paruosimas_atom(pdb_termo_lent = pdb_tm_wt, grupavimo_failas = grupavimo_failas)
A <- matricu_lenteles$visu_baltymu_kont_sumu_skirtumai_atom
b <- c(matricu_lenteles$termo_skirtumai_atom)
dim(A)
matricu_lenteles <- fun_matricu_paruosimas_atom(pdb_termo_lent = pdb_tm_wt, grupavimo_failas = grupavimo_failas)
grupavimo_failas <- data.table::fread(
"/Users/user/Desktop/praktika/r-praktika/atom types/FTA.atoms",
dec = ".", header = FALSE, skip = 1, encoding = "UTF-8", fill = TRUE,
data.table = FALSE
)
lizocimai_pagr <- readr::read_rds("./data/pro_344_sm_suppinfo.rds")
pdb_tm_wt <- lizocimai_pagr %>%
select(pdb, deltaTm, WT) %>%
drop_na(pdb, deltaTm) %>%
filter(pdb != "2LZM" & pdb != "1L63")
pdb_tm_wt
matricu_lenteles <- fun_matricu_paruosimas_atom(pdb_termo_lent = pdb_tm_wt, grupavimo_failas = grupavimo_failas)
library("tidyverse")
library("data.table")
library("compareDF")
library("tidyr")
library("matlib")
fun_atomu_grupiu_sumoms <- function(liz_kont, grupavimo_failas) { #pirmas kintamasis- kontaktu failas su pridetais pavadinimais ar1_atom1,
#-------
# atomu pervadinimas pilnesniu pavadinimu
kontaktai_atomu_pavadinimai <- liz_kont %>%
select(V6, V7, V13, V14, V15) %>%
filter(V13 != ".") %>%
filter(V7 != "OXT") %>% #!!!!!!!!!!!!!!!!!
filter(V14 != "OXT") %>% #!!!!!!!!!!!!!!!!!
mutate(V6 = recode_factor(V6,"MSE" = "MET")) %>%
mutate(V13 = recode_factor(V13,"MSE" = "MET"))
kontaktai_atomu_pavadinimai$ar1_atom1 <- with(kontaktai_atomu_pavadinimai, paste0(V6,V7))
kontaktai_atomu_pavadinimai$ar2_atom2 <- with(kontaktai_atomu_pavadinimai, paste0(V13,V14))
#------
# Grupes priskyrimas kiekvienam atomui
grupavimo_lentele <- grupavimo_failas %>%
mutate_all(na_if,"") %>%
tibble::column_to_rownames(var = "V1")
grupes_pavadinimai <- rownames(grupavimo_lentele)
kontaktai_atomu_pavadinimai <- kontaktai_atomu_pavadinimai %>%
mutate(grupe1 = 0) %>%
mutate(grupe2 = 0)
for (i in grupes_pavadinimai) {
viena_eilute <- grupavimo_lentele[i,]
viena_eilute <- viena_eilute[,colSums(is.na(viena_eilute)) == 0]
for (j in viena_eilute) {
kontaktai_atomu_pavadinimai <- kontaktai_atomu_pavadinimai %>%
mutate(grupe1 = ifelse(ar1_atom1 == j, i, grupe1)) %>%
mutate(grupe2 = ifelse(ar2_atom2 == j, i, grupe2))
}
}
#-----
# Isrusiuotu pavadinimu grupe1-grupe2 sudarymas ir kontakto sumu skaiciavimas pagal grupes
matrica_pavadinimams <- as.matrix(data.frame(grupe1 = kontaktai_atomu_pavadinimai$grupe1, grupe2 = kontaktai_atomu_pavadinimai$grupe2))
surusiuoti_pavad <- matrica_pavadinimams %>%
split(., row(.)) %>% sapply(
. %>% sort %>% paste(collapse = "-")
) %>% data.frame
atom_kont_sumos <- cbind(kontaktai_atomu_pavadinimai, surusiuoti_pavad) %>%
rename(kontakto_tipas = ".") %>%
group_by(kontakto_tipas) %>%
summarise(kontakto_suma = sum(V15))
#-----
# Nulines lenteles kurimas
grupavimo_lentele <- grupavimo_failas %>%
mutate_all(na_if,"") %>%
tibble::column_to_rownames(var = "V1")
grupes_pavadinimai <- rownames(grupavimo_lentele)
nuline_lentele_atomu_grupiu_pavadinimai<- data.frame(1:(nrow(grupavimo_lentele)^2))
nuline_lentele_atomu_grupiu_pavadinimai$pirma <- data.frame(rep(grupes_pavadinimai, each = nrow(grupavimo_lentele)))
nuline_lentele_atomu_grupiu_pavadinimai$antra <- rep(grupes_pavadinimai, times = nrow(grupavimo_lentele))
matrica_pavadinimams_nuline <- as.matrix(data.frame(grupe1 = nuline_lentele_atomu_grupiu_pavadinimai$pirma, grupe2 = nuline_lentele_atomu_grupiu_pavadinimai$antra))
nuline_lentele_atomu <- matrica_pavadinimams_nuline %>%
split(., row(.)) %>% sapply(
. %>% sort %>% paste(collapse = "-")
) %>% data.frame() %>%
rename("kontakto_tipas" = ".")
nuline_lentele_atomu$nuliai <- rep(0, times = nrow(nuline_lentele_atomu))
nuline_lentele_atomu <- nuline_lentele_atomu %>%
group_by(kontakto_tipas) %>%
summarise(nuliai = sum(nuliai)) %>%
transpose(make.names = "kontakto_tipas")
nuline_lentele_atomu
#-----
# Standartizavimas
atom_kont_sumos <- spread(atom_kont_sumos, kontakto_tipas, kontakto_suma)
sujungta <- full_join(nuline_lentele_atomu, atom_kont_sumos) %>%
gather() %>%
group_by(key) %>%
summarise(kontakto_suma = sum(value)) %>%
mutate_all(~replace(., is.na(.), 0)) %>%
spread(., key, kontakto_suma)
#----------
return(sujungta)
}
lizocimo_atom_kontaktai_1L63 <- data.table::fread("./lizocimai/1L63.contacts.interatom.table")
grupavimo_failas <- data.table::fread(
"/Users/user/Desktop/praktika/r-praktika/atom types/FTA.atoms",
dec = ".", header = FALSE, skip = 1, encoding = "UTF-8", fill = TRUE,
data.table = FALSE
)
rezultatai <- fun_atomu_grupiu_sumoms(lizocimo_atom_kontaktai_1L63, grupavimo_failas)
rezultatai
fun_matricu_paruosimas_atom <- function(pdb_termo_lent, grupavimo_failas) {
visu_baltymu_kont_sumu_skirtumai <- data.frame()
termo_skirtumai <- data.frame() #desine tiesiniu lygciu sistemos puse matricose
#----
#wtx ir wt standartiniu lenteliu sukurimas
lizocimo_kontaktai_wt <- data.table::fread("./lizocimai/2LZM.contacts.interatom.table")
wt_atom <- fun_atomu_grupiu_sumoms(lizocimo_kontaktai_wt, grupavimo_failas)
lizocimo_kontaktai_wtx <- data.table::fread("./lizocimai/1L63.contacts.interatom.table")
wtx_atom <- fun_atomu_grupiu_sumoms(lizocimo_kontaktai_wtx, grupavimo_failas)
#----
for (i in pdb_termo_lent$pdb) {
lizocimo_kontaktai <- data.table::fread(paste("./lizocimai/",i,".contacts.interatom.table", sep = ""))
kontaktu_sumos_atom <- fun_atomu_grupiu_sumoms(lizocimo_kontaktai, grupavimo_failas)
viena_eilute <- pdb_termo_lent %>%
filter(pdb == i)
if (viena_eilute$WT == "wt") {
wt_ir_lizocimas_atom <- rbind(wt_atom, kontaktu_sumos_atom) %>%
transpose(keep.names = "kontakto_tipas") %>%
mutate(kont_sumu_skirtumas = V1 - V2) %>%
select(kontakto_tipas, kont_sumu_skirtumas) %>%
transpose(make.names = "kontakto_tipas")
} else {
wt_ir_lizocimas_atom <- rbind(wtx_atom, kontaktu_sumos_atom) %>%
transpose(keep.names = "kontakto_tipas") %>%
mutate(kont_sumu_skirtumas = V1 - V2) %>%
select(kontakto_tipas, kont_sumu_skirtumas) %>%
transpose(make.names = "kontakto_tipas")
}
visu_baltymu_kont_sumu_skirtumai <- rbind(visu_baltymu_kont_sumu_skirtumai, wt_ir_lizocimas_atom)
lizocimo_kontaktai = NULL
}
termo_skirtumai <- pdb_termo_lent %>%
select(-WT, -pdb)
return(list(visu_baltymu_kont_sumu_skirtumai_atom = as.matrix(visu_baltymu_kont_sumu_skirtumai),termo_skirtumai_atom = as.matrix(termo_skirtumai)))
}
grupavimo_failas <- data.table::fread(
"/Users/user/Desktop/praktika/r-praktika/atom types/FTA.atoms",
dec = ".", header = FALSE, skip = 1, encoding = "UTF-8", fill = TRUE,
data.table = FALSE
)
lizocimai_pagr <- readr::read_rds("./data/pro_344_sm_suppinfo.rds")
pdb_tm_pvz <- lizocimai_pagr %>%
filter(pdb != "2LZM" & pdb != "1L63") %>%
select(pdb, deltaTm, WT) %>%
drop_na(pdb, deltaTm) %>%
head()
pdb_tm_pvz
# rezultatai_2 <- fun_matricu_paruosimas_atom(pdb_tm_pvz, grupavimo_failas)
# rezultatai_2$visu_baltymu_kont_sumu_skirtumai_atom
# rezultatai_2$termo_skirtumai_atom
library("tidyverse")
library("data.table")
library("compareDF")
library("tidyr")
library("matlib")
fun_atomu_grupiu_sumoms <- function(liz_kont, grupavimo_failas) { #pirmas kintamasis- kontaktu failas su pridetais pavadinimais ar1_atom1,
#-------
# atomu pervadinimas pilnesniu pavadinimu
kontaktai_atomu_pavadinimai <- liz_kont %>%
select(V6, V7, V13, V14, V15) %>%
filter(V13 != ".") %>%
filter(V7 != "OXT") %>% #!!!!!!!!!!!!!!!!!
filter(V14 != "OXT") %>% #!!!!!!!!!!!!!!!!!
mutate(V6 = recode_factor(V6,"MSE" = "MET")) %>%
mutate(V13 = recode_factor(V13,"MSE" = "MET"))
kontaktai_atomu_pavadinimai$ar1_atom1 <- with(kontaktai_atomu_pavadinimai, paste0(V6,V7))
kontaktai_atomu_pavadinimai$ar2_atom2 <- with(kontaktai_atomu_pavadinimai, paste0(V13,V14))
#------
# Grupes priskyrimas kiekvienam atomui
grupavimo_lentele <- grupavimo_failas %>%
mutate_all(na_if,"") %>%
tibble::column_to_rownames(var = "V1")
grupes_pavadinimai <- rownames(grupavimo_lentele)
kontaktai_atomu_pavadinimai <- kontaktai_atomu_pavadinimai %>%
mutate(grupe1 = 0) %>%
mutate(grupe2 = 0)
for (i in grupes_pavadinimai) {
viena_eilute <- grupavimo_lentele[i,]
viena_eilute <- viena_eilute[,colSums(is.na(viena_eilute)) == 0]
for (j in viena_eilute) {
kontaktai_atomu_pavadinimai <- kontaktai_atomu_pavadinimai %>%
mutate(grupe1 = ifelse(ar1_atom1 == j, i, grupe1)) %>%
mutate(grupe2 = ifelse(ar2_atom2 == j, i, grupe2))
}
}
#-----
# Isrusiuotu pavadinimu grupe1-grupe2 sudarymas ir kontakto sumu skaiciavimas pagal grupes
matrica_pavadinimams <- as.matrix(data.frame(grupe1 = kontaktai_atomu_pavadinimai$grupe1, grupe2 = kontaktai_atomu_pavadinimai$grupe2))
surusiuoti_pavad <- matrica_pavadinimams %>%
split(., row(.)) %>% sapply(
. %>% sort %>% paste(collapse = "-")
) %>% data.frame
atom_kont_sumos <- cbind(kontaktai_atomu_pavadinimai, surusiuoti_pavad) %>%
rename(kontakto_tipas = ".") %>%
group_by(kontakto_tipas) %>%
summarise(kontakto_suma = sum(V15))
#-----
# Nulines lenteles kurimas
grupavimo_lentele <- grupavimo_failas %>%
mutate_all(na_if,"") %>%
tibble::column_to_rownames(var = "V1")
grupes_pavadinimai <- rownames(grupavimo_lentele)
nuline_lentele_atomu_grupiu_pavadinimai<- data.frame(1:(nrow(grupavimo_lentele)^2))
nuline_lentele_atomu_grupiu_pavadinimai$pirma <- data.frame(rep(grupes_pavadinimai, each = nrow(grupavimo_lentele)))
nuline_lentele_atomu_grupiu_pavadinimai$antra <- rep(grupes_pavadinimai, times = nrow(grupavimo_lentele))
matrica_pavadinimams_nuline <- as.matrix(data.frame(grupe1 = nuline_lentele_atomu_grupiu_pavadinimai$pirma, grupe2 = nuline_lentele_atomu_grupiu_pavadinimai$antra))
nuline_lentele_atomu <- matrica_pavadinimams_nuline %>%
split(., row(.)) %>% sapply(
. %>% sort %>% paste(collapse = "-")
) %>% data.frame() %>%
rename("kontakto_tipas" = ".")
nuline_lentele_atomu$nuliai <- rep(0, times = nrow(nuline_lentele_atomu))
nuline_lentele_atomu <- nuline_lentele_atomu %>%
group_by(kontakto_tipas) %>%
summarise(nuliai = sum(nuliai)) %>%
transpose(make.names = "kontakto_tipas")
nuline_lentele_atomu
#-----
# Standartizavimas
atom_kont_sumos <- spread(atom_kont_sumos, kontakto_tipas, kontakto_suma)
sujungta <- full_join(nuline_lentele_atomu, atom_kont_sumos) %>%
gather() %>%
group_by(key) %>%
summarise(kontakto_suma = sum(value)) %>%
mutate_all(~replace(., is.na(.), 0)) %>%
spread(., key, kontakto_suma)
#----------
return(sujungta)
}
lizocimo_atom_kontaktai_1L63 <- data.table::fread("./lizocimai/1L63.contacts.interatom.table")
grupavimo_failas <- data.table::fread(
"/Users/user/Desktop/praktika/r-praktika/atom types/FTA.atoms",
dec = ".", header = FALSE, skip = 1, encoding = "UTF-8", fill = TRUE,
data.table = FALSE
)
rezultatai <- fun_atomu_grupiu_sumoms(lizocimo_atom_kontaktai_1L63, grupavimo_failas)
rezultatai
fun_matricu_paruosimas_atom <- function(pdb_termo_lent, grupavimo_failas) {
visu_baltymu_kont_sumu_skirtumai <- data.frame()
termo_skirtumai <- data.frame() #desine tiesiniu lygciu sistemos puse matricose
#----
#wtx ir wt standartiniu lenteliu sukurimas
lizocimo_kontaktai_wt <- data.table::fread("./lizocimai/2LZM.contacts.interatom.table")
wt_atom <- fun_atomu_grupiu_sumoms(lizocimo_kontaktai_wt, grupavimo_failas)
lizocimo_kontaktai_wtx <- data.table::fread("./lizocimai/1L63.contacts.interatom.table")
wtx_atom <- fun_atomu_grupiu_sumoms(lizocimo_kontaktai_wtx, grupavimo_failas)
#----
for (i in pdb_termo_lent$pdb) {
lizocimo_kontaktai <- data.table::fread(paste("./lizocimai/",i,".contacts.interatom.table", sep = ""))
kontaktu_sumos_atom <- fun_atomu_grupiu_sumoms(lizocimo_kontaktai, grupavimo_failas)
viena_eilute <- pdb_termo_lent %>%
filter(pdb == i)
if (viena_eilute$WT == "wt") {
wt_ir_lizocimas_atom <- rbind(wt_atom, kontaktu_sumos_atom) %>%
transpose(keep.names = "kontakto_tipas") %>%
mutate(kont_sumu_skirtumas = V1 - V2) %>%
select(kontakto_tipas, kont_sumu_skirtumas) %>%
transpose(make.names = "kontakto_tipas")
} else {
wt_ir_lizocimas_atom <- rbind(wtx_atom, kontaktu_sumos_atom) %>%
transpose(keep.names = "kontakto_tipas") %>%
mutate(kont_sumu_skirtumas = V1 - V2) %>%
select(kontakto_tipas, kont_sumu_skirtumas) %>%
transpose(make.names = "kontakto_tipas")
}
visu_baltymu_kont_sumu_skirtumai <- rbind(visu_baltymu_kont_sumu_skirtumai, wt_ir_lizocimas_atom)
lizocimo_kontaktai = NULL
}
termo_skirtumai <- pdb_termo_lent %>%
select(-WT, -pdb)
return(list(visu_baltymu_kont_sumu_skirtumai_atom = as.matrix(visu_baltymu_kont_sumu_skirtumai),termo_skirtumai_atom = as.matrix(termo_skirtumai)))
}
grupavimo_failas <- data.table::fread(
"/Users/user/Desktop/praktika/r-praktika/atom types/FTA.atoms",
dec = ".", header = FALSE, skip = 1, encoding = "UTF-8", fill = TRUE,
data.table = FALSE
)
lizocimai_pagr <- readr::read_rds("./data/pro_344_sm_suppinfo.rds")
pdb_tm_pvz <- lizocimai_pagr %>%
filter(pdb != "2LZM" & pdb != "1L63") %>%
select(pdb, deltaTm, WT) %>%
drop_na(pdb, deltaTm) %>%
head()
pdb_tm_pvz
# rezultatai_2 <- fun_matricu_paruosimas_atom(pdb_tm_pvz, grupavimo_failas)
# rezultatai_2$visu_baltymu_kont_sumu_skirtumai_atom
# rezultatai_2$termo_skirtumai_atom
library("tidyverse")
library("data.table")
library("compareDF")
library("tidyr")
library("pracma")
library("readr")
grupavimo_failas <- data.table::fread(
"/Users/user/Desktop/praktika/r-praktika/atom types/FTA.atoms",
dec = ".", header = FALSE, skip = 1, encoding = "UTF-8", fill = TRUE,
data.table = FALSE
)
lizocimai_pagr <- readr::read_rds("./data/pro_344_sm_suppinfo.rds")
pdb_tm_wt <- lizocimai_pagr %>%
select(pdb, deltaTm, WT) %>%
drop_na(pdb, deltaTm) %>%
filter(pdb != "2LZM" & pdb != "1L63") %>%
head(20)
pdb_tm_wt
matricu_lenteles <- fun_matricu_paruosimas_atom(pdb_termo_lent = pdb_tm_wt, grupavimo_failas = grupavimo_failas)
A <- matricu_lenteles$visu_baltymu_kont_sumu_skirtumai_atom
b <- c(matricu_lenteles$termo_skirtumai_atom)
dim(A)
# rankifremoved <- sapply(1:ncol(A), function (x) qr(A[,-x])$rank)
# rankifremoved
# which(rankifremoved == max(rankifremoved))
rankifremoved <- sapply(1:ncol(A), function (x) qr(A[,-x])$rank)
rankifremoved
which(rankifremoved == max(rankifremoved))
rankifremoved <- sapply(1:ncol(A), function (x) qr(A[,-x])$rank)
which(rankifremoved == max(rankifremoved))
rankifremoved <- sapply(1:ncol(A), function (x) qr(A[,-x])$rank)
rankifremoved
which(rankifremoved == max(rankifremoved))
grupavimo_failas <- data.table::fread(
"/Users/user/Desktop/praktika/r-praktika/atom types/FTA.atoms",
dec = ".", header = FALSE, skip = 1, encoding = "UTF-8", fill = TRUE,
data.table = FALSE
)
lizocimai_pagr <- readr::read_rds("./data/pro_344_sm_suppinfo.rds")
pdb_tm_wt <- lizocimai_pagr %>%
select(pdb, deltaTm, WT) %>%
drop_na(pdb, deltaTm) %>%
filter(pdb != "2LZM" & pdb != "1L63")
pdb_tm_wt
matricu_lenteles <- fun_matricu_paruosimas_atom(pdb_termo_lent = pdb_tm_wt, grupavimo_failas = grupavimo_failas)
